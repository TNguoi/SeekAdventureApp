import { vars as vars$1 } from "./styles/lib/themes/vars.css.mjs";
import { atoms as atoms$1 } from "./styles/lib/css/atoms/atoms.mjs";
import { colorModeStyle } from "./styles/lib/css/colorModeStyle.mjs";
import { responsiveStyle } from "./styles/lib/css/responsiveStyle.mjs";
import { breakpoints } from "./styles/lib/css/breakpoints.mjs";
const globalTextStyle = ({
  weight = "regular",
  size = "standard"
} = {}) => ({
  fontFamily: vars$1.fontFamily,
  fontWeight: vars$1.textWeight[weight],
  color: vars$1.foregroundColor.neutral,
  ...responsiveStyle({
    mobile: {
      fontSize: vars$1.textSize[size].mobile.fontSize,
      lineHeight: vars$1.textSize[size].mobile.lineHeight
    },
    tablet: {
      fontSize: vars$1.textSize[size].tablet.fontSize,
      lineHeight: vars$1.textSize[size].tablet.lineHeight
    }
  })
});
const globalHeadingStyle = ({
  weight = "regular",
  level
}) => ({
  fontFamily: vars$1.fontFamily,
  fontWeight: vars$1.headingWeight[weight],
  color: vars$1.foregroundColor.neutral,
  ...responsiveStyle({
    mobile: {
      fontSize: vars$1.headingLevel[level].mobile.fontSize,
      lineHeight: vars$1.headingLevel[level].mobile.lineHeight
    },
    tablet: {
      fontSize: vars$1.headingLevel[level].tablet.fontSize,
      lineHeight: vars$1.headingLevel[level].tablet.lineHeight
    }
  })
});
const {
  grid,
  space,
  touchableSize,
  contentWidth,
  // TODO: COLORMODE RELEASE
  // Release new backgrounds
  backgroundColor: { surfaceDark: _, bodyDark: __, ...backgroundColor },
  foregroundColor,
  textWeight,
  borderColor,
  borderRadius,
  borderWidth,
  shadow
} = vars$1;
const vars = {
  grid,
  space,
  touchableSize,
  contentWidth,
  backgroundColor,
  foregroundColor,
  textWeight,
  borderColor,
  borderRadius,
  borderWidth,
  shadow
};
function atoms(props) {
  if (process.env.NODE_ENV !== "production") {
    if ("background" in props) {
      throw new Error(
        `'background' is not available via 'atoms'. This is because Braid uses React context to dynamically apply matching tones to child elements. Please use \`<Box background="...">\` instead.`
      );
    }
  }
  return atoms$1(props);
}
export {
  atoms,
  breakpoints,
  colorModeStyle,
  globalHeadingStyle,
  globalTextStyle,
  responsiveStyle,
  vars
};
