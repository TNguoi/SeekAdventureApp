"use strict";
const courierNewMetrics = require("@capsizecss/metrics/courierNew.js");
const polished = require("polished");
const sideEffects_lib_themes_tokenType_cjs = require("../../../../side-effects/lib/themes/tokenType.cjs");
const styles_lib_utils_index_cjs = require("../../utils/index.cjs");
const _interopDefaultCompat = (e) => e && typeof e === "object" && "default" in e ? e : { default: e };
const courierNewMetrics__default = /* @__PURE__ */ _interopDefaultCompat(courierNewMetrics);
const formAccent = "#767676";
const critical = "#ef3e4a";
const criticalLightBackground = "#fbe9eb";
const positive = "#00af50";
const info = "#2c88f7";
const promote = "#855be5";
const caution = "#ffc600";
const brandAccent = "#111";
const focus = "DeepSkyBlue";
const black = "#303030";
const white = "#fff";
const link = "#4c77bb";
const linkVisited = "DarkViolet";
const secondary = "#777";
const neutral = "#333";
const neutralSoft = polished.lighten(0.02, styles_lib_utils_index_cjs.getLightVariant(neutral));
const brandAccentLight = styles_lib_utils_index_cjs.findClosestAccessibleLighterColor(
  brandAccent,
  neutral
);
const formAccentLight = styles_lib_utils_index_cjs.findClosestAccessibleLighterColor(formAccent, neutral);
const criticalLight = styles_lib_utils_index_cjs.findClosestAccessibleLighterColor(critical, neutral);
const cautionLight = styles_lib_utils_index_cjs.findClosestAccessibleLighterColor(caution, neutral);
const infoLight = styles_lib_utils_index_cjs.findClosestAccessibleLighterColor(info, neutral);
const linkLight = styles_lib_utils_index_cjs.findClosestAccessibleLighterColor(link, neutral);
const linkLightVisited = styles_lib_utils_index_cjs.findClosestAccessibleLighterColor(
  linkVisited,
  neutral
);
const positiveLight = styles_lib_utils_index_cjs.findClosestAccessibleLighterColor(positive, neutral);
const promoteLight = styles_lib_utils_index_cjs.findClosestAccessibleLighterColor(promote, neutral);
const getActiveColor = (x) => styles_lib_utils_index_cjs.isLight(x) ? polished.darken(0.1, x) : polished.darken(0.05, x);
const getHoverColor = (x) => styles_lib_utils_index_cjs.isLight(x) ? polished.darken(0.05, x) : polished.lighten(0.05, x);
const tokens = {
  name: "wireframe",
  displayName: "Wireframe",
  legacy: false,
  typography: {
    fontFamily: '"Courier New", monospace',
    webFont: null,
    fontMetrics: sideEffects_lib_themes_tokenType_cjs.extractFontMetricsForTheme(courierNewMetrics__default.default),
    fontWeight: {
      regular: 400,
      medium: 500,
      strong: 700
    },
    heading: {
      weight: {
        weak: "regular",
        regular: "strong"
      },
      level: {
        "1": {
          mobile: {
            fontSize: 28,
            lineGap: 22
          },
          tablet: {
            fontSize: 42,
            lineGap: 22
          }
        },
        "2": {
          mobile: {
            fontSize: 21,
            lineGap: 20
          },
          tablet: {
            fontSize: 28,
            lineGap: 20
          }
        },
        "3": {
          mobile: {
            fontSize: 21,
            lineGap: 18
          },
          tablet: {
            fontSize: 21,
            lineGap: 18
          }
        },
        "4": {
          mobile: {
            fontSize: 18,
            lineGap: 16
          },
          tablet: {
            fontSize: 18,
            lineGap: 16
          }
        }
      }
    },
    text: {
      xsmall: {
        mobile: {
          fontSize: 12,
          lineGap: 11
        },
        tablet: {
          fontSize: 12,
          lineGap: 11
        }
      },
      small: {
        mobile: {
          fontSize: 14,
          lineGap: 12
        },
        tablet: {
          fontSize: 14,
          lineGap: 12
        }
      },
      standard: {
        mobile: {
          fontSize: 16,
          lineGap: 14
        },
        tablet: {
          fontSize: 16,
          lineGap: 14
        }
      },
      large: {
        mobile: {
          fontSize: 18,
          lineGap: 16
        },
        tablet: {
          fontSize: 18,
          lineGap: 16
        }
      }
    }
  },
  contentWidth: {
    xsmall: 400,
    small: 660,
    medium: 940,
    large: 1280
  },
  grid: 4,
  touchableSize: 12,
  space: {
    gutter: 6,
    xxsmall: 1,
    xsmall: 2,
    small: 3,
    medium: 5,
    large: 8,
    xlarge: 12,
    xxlarge: 24,
    xxxlarge: 30
  },
  transforms: {
    touchable: "scale(0.97)"
  },
  transitions: {
    fast: "transform .125s ease, opacity .125s ease",
    touchable: "transform 0.2s cubic-bezier(0.02, 1.505, 0.745, 1.235)"
  },
  border: {
    radius: {
      small: "4px",
      standard: "6px",
      large: "8px",
      xlarge: "10px"
    },
    width: {
      standard: 1,
      large: 2
    },
    color: {
      brandAccent,
      brandAccentLight,
      caution,
      cautionLight,
      critical,
      criticalLight,
      field: "#333",
      focus,
      formAccent,
      formAccentLight,
      info,
      infoLight,
      neutral: black,
      neutralInverted: white,
      neutralLight: "#777",
      positive,
      positiveLight,
      promote,
      promoteLight
    }
  },
  focusRingSize: 2,
  shadows: {
    small: "0 2px 4px 0px rgba(28,28,28,.1), 0 2px 2px -2px rgba(28,28,28,.1), 0 4px 4px -4px rgba(28,28,28,.2)",
    medium: "0 2px 4px 0px rgba(28,28,28,.1), 0 8px 8px -4px rgba(28,28,28,.1), 0 12px 12px -8px rgba(28,28,28,.2)",
    large: "0 2px 4px 0px rgba(28,28,28,.1), 0 12px 12px -4px rgba(28,28,28,.1), 0 20px 20px -12px rgba(28,28,28,.2)"
  },
  color: {
    foreground: {
      brandAccent,
      brandAccentLight,
      caution: styles_lib_utils_index_cjs.getAccessibleVariant(caution, caution),
      cautionLight,
      critical: styles_lib_utils_index_cjs.getAccessibleVariant(critical),
      criticalLight,
      formAccent,
      formAccentLight,
      info: styles_lib_utils_index_cjs.getAccessibleVariant(info),
      infoLight,
      link,
      linkHover: link,
      linkLight,
      linkLightVisited,
      linkVisited,
      neutral: black,
      neutralInverted: white,
      positive: styles_lib_utils_index_cjs.getAccessibleVariant(positive),
      positiveLight,
      promote: styles_lib_utils_index_cjs.getAccessibleVariant(promote),
      promoteLight,
      rating: black,
      secondary,
      secondaryInverted: "hsla(0, 0%, 100%, 0.65)"
    },
    background: {
      body: "whitesmoke",
      bodyDark: "black",
      brand: black,
      brandAccent,
      brandAccentActive: getActiveColor(brandAccent),
      brandAccentHover: getHoverColor(brandAccent),
      brandAccentSoft: polished.tint(0.925, brandAccent),
      brandAccentSoftActive: polished.tint(0.85, brandAccent),
      brandAccentSoftHover: polished.tint(0.9, brandAccent),
      caution,
      cautionLight: styles_lib_utils_index_cjs.getLightVariant(caution),
      critical,
      criticalActive: getActiveColor(critical),
      criticalHover: getHoverColor(critical),
      criticalLight: criticalLightBackground,
      criticalSoft: polished.tint(0.925, critical),
      criticalSoftActive: polished.tint(0.85, critical),
      criticalSoftHover: polished.tint(0.9, critical),
      formAccent,
      formAccentActive: getActiveColor(formAccent),
      formAccentHover: getHoverColor(formAccent),
      formAccentSoft: polished.tint(0.925, formAccent),
      formAccentSoftActive: polished.tint(0.85, formAccent),
      formAccentSoftHover: polished.tint(0.9, formAccent),
      info,
      infoLight: styles_lib_utils_index_cjs.getLightVariant(info),
      neutral,
      neutralActive: polished.darken(0.05, neutral),
      neutralHover: polished.lighten(0.05, neutral),
      neutralLight: polished.darken(0.04, styles_lib_utils_index_cjs.getLightVariant(neutral)),
      neutralSoft,
      neutralSoftActive: polished.darken(0.05, neutralSoft),
      neutralSoftHover: polished.darken(0.025, neutralSoft),
      positive,
      positiveLight: styles_lib_utils_index_cjs.getLightVariant(positive),
      promote,
      promoteLight: styles_lib_utils_index_cjs.getLightVariant(promote),
      surface: white,
      surfaceDark: "#222"
    }
  }
};
exports.tokens = tokens;
