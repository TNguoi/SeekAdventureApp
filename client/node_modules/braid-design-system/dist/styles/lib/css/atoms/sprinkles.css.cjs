"use strict";
const fileScope = require("@vanilla-extract/css/fileScope");
const css = require("@vanilla-extract/css");
const sprinkles$1 = require("@vanilla-extract/sprinkles");
const styles_lib_css_breakpoints_cjs = require("../breakpoints.cjs");
const styles_lib_css_atoms_atomicProperties_cjs = require("./atomicProperties.cjs");
fileScope.setFileScope("src/lib/css/atoms/sprinkles.css.ts?used", "braid-design-system");
const unresponsiveAtomicProperties = sprinkles$1.defineProperties({
  properties: styles_lib_css_atoms_atomicProperties_cjs.unresponsiveProperties,
  shorthands: {
    inset: ["top", "bottom", "left", "right"]
  }
});
const pseudoAtomicProperties = sprinkles$1.defineProperties({
  defaultCondition: false,
  conditions: {
    active: {
      selector: "&:active"
    }
  },
  properties: styles_lib_css_atoms_atomicProperties_cjs.pseudoProperties
});
const darkMode = css.style({}, "darkMode");
const colorModeSelectors = {
  light: `html:not(${darkMode}) &`,
  dark: `html${darkMode} &`
};
const colorAtomicProperties = sprinkles$1.defineProperties({
  defaultCondition: "lightMode",
  conditions: {
    lightMode: {
      selector: colorModeSelectors.light
    },
    darkMode: {
      selector: colorModeSelectors.dark
    }
  },
  properties: styles_lib_css_atoms_atomicProperties_cjs.colorProperties
});
const responsiveAtomicProperties = sprinkles$1.defineProperties({
  defaultCondition: "mobile",
  conditions: {
    mobile: {},
    tablet: {
      "@media": `screen and (min-width: ${styles_lib_css_breakpoints_cjs.breakpoints.tablet}px)`
    },
    desktop: {
      "@media": `screen and (min-width: ${styles_lib_css_breakpoints_cjs.breakpoints.desktop}px)`
    },
    wide: {
      "@media": `screen and (min-width: ${styles_lib_css_breakpoints_cjs.breakpoints.wide}px)`
    }
  },
  responsiveArray: styles_lib_css_breakpoints_cjs.breakpointNames,
  properties: styles_lib_css_atoms_atomicProperties_cjs.responsiveProperties,
  shorthands: {
    padding: ["paddingBottom", "paddingTop", "paddingLeft", "paddingRight"],
    paddingY: ["paddingTop", "paddingBottom"],
    paddingX: ["paddingLeft", "paddingRight"],
    margin: ["marginBottom", "marginTop", "marginLeft", "marginRight"],
    marginY: ["marginTop", "marginBottom"],
    marginX: ["marginLeft", "marginRight"]
  }
});
const sprinkles = sprinkles$1.createSprinkles(unresponsiveAtomicProperties, responsiveAtomicProperties, pseudoAtomicProperties, colorAtomicProperties);
const normalizeResponsiveValue = sprinkles$1.createNormalizeValueFn(responsiveAtomicProperties);
const mapResponsiveValue = sprinkles$1.createMapValueFn(responsiveAtomicProperties);
const mapColorModeValue = sprinkles$1.createMapValueFn(colorAtomicProperties);
fileScope.endFileScope();
exports.colorModeSelectors = colorModeSelectors;
exports.darkMode = darkMode;
exports.mapColorModeValue = mapColorModeValue;
exports.mapResponsiveValue = mapResponsiveValue;
exports.normalizeResponsiveValue = normalizeResponsiveValue;
exports.sprinkles = sprinkles;
