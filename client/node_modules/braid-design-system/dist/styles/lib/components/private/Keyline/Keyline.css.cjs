"use strict";
const fileScope = require("@vanilla-extract/css/fileScope");
const css = require("@vanilla-extract/css");
const styles_lib_css_colorModeStyle_cjs = require("../../../css/colorModeStyle.cjs");
const styles_lib_themes_vars_css_cjs = require("../../../themes/vars.css.cjs");
fileScope.setFileScope("src/lib/components/private/Keyline/Keyline.css.ts?used", "braid-design-system");
const keylineVars = css.createThemeContract({
  promote: null,
  info: null,
  positive: null,
  caution: null,
  critical: null,
  formAccent: null
});
const lightModeVars = {
  vars: css.assignVars(keylineVars, {
    promote: styles_lib_themes_vars_css_cjs.vars.borderColor.promote,
    info: styles_lib_themes_vars_css_cjs.vars.borderColor.info,
    positive: styles_lib_themes_vars_css_cjs.vars.borderColor.positive,
    caution: styles_lib_themes_vars_css_cjs.vars.borderColor.caution,
    critical: styles_lib_themes_vars_css_cjs.vars.borderColor.critical,
    formAccent: styles_lib_themes_vars_css_cjs.vars.borderColor.formAccent
  })
};
const darkModeVars = {
  vars: css.assignVars(keylineVars, {
    promote: styles_lib_themes_vars_css_cjs.vars.borderColor.promoteLight,
    info: styles_lib_themes_vars_css_cjs.vars.borderColor.infoLight,
    positive: styles_lib_themes_vars_css_cjs.vars.borderColor.positiveLight,
    caution: styles_lib_themes_vars_css_cjs.vars.borderColor.cautionLight,
    critical: styles_lib_themes_vars_css_cjs.vars.borderColor.criticalLight,
    formAccent: styles_lib_themes_vars_css_cjs.vars.borderColor.formAccentLight
  })
};
const tone = css.styleVariants(keylineVars, (_, name) => ({
  background: keylineVars[name]
}), "tone");
const lightMode = css.styleVariants({
  light: styles_lib_css_colorModeStyle_cjs.colorModeStyle({
    lightMode: lightModeVars
  }),
  dark: styles_lib_css_colorModeStyle_cjs.colorModeStyle({
    lightMode: darkModeVars
  })
}, "lightMode");
const darkMode = css.styleVariants({
  light: styles_lib_css_colorModeStyle_cjs.colorModeStyle({
    darkMode: lightModeVars
  }),
  dark: styles_lib_css_colorModeStyle_cjs.colorModeStyle({
    darkMode: darkModeVars
  })
}, "darkMode");
const noRadiusOnRight = css.style({
  borderTopRightRadius: "0 !important",
  borderBottomRightRadius: "0 !important"
}, "noRadiusOnRight");
const largestWidth = css.style({
  width: styles_lib_themes_vars_css_cjs.vars.borderRadius.xlarge
}, "largestWidth");
const width = css.style({
  width: styles_lib_themes_vars_css_cjs.vars.grid
}, "width");
fileScope.endFileScope();
exports.darkMode = darkMode;
exports.largestWidth = largestWidth;
exports.lightMode = lightMode;
exports.noRadiusOnRight = noRadiusOnRight;
exports.tone = tone;
exports.width = width;
