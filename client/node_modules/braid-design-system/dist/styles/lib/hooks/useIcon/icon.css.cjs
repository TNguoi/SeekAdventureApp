"use strict";
const fileScope = require("@vanilla-extract/css/fileScope");
const css = require("@vanilla-extract/css");
const styles_lib_css_responsiveStyle_cjs = require("../../css/responsiveStyle.cjs");
const styles_lib_themes_vars_css_cjs = require("../../themes/vars.css.cjs");
fileScope.setFileScope("src/lib/hooks/useIcon/icon.css.ts?used", "braid-design-system");
const iconScaleIncrease = 0.2;
const size = css.style({
  width: `${1 + iconScaleIncrease}em`,
  height: `${1 + iconScaleIncrease}em`
}, "size");
const cropToTextSize = css.style({
  margin: `${iconScaleIncrease / 2 * -1}em`
}, "cropToTextSize");
const inlineCrop = css.style({
  marginTop: `-${iconScaleIncrease}em`,
  marginBottom: `-${iconScaleIncrease}em`
}, "inlineCrop");
const inline = css.style({
  verticalAlign: "middle"
}, "inline");
const uppercaseNudge = -0.105;
const lowercaseNudge = uppercaseNudge + 0.04;
const verticalCorrection = 0.06;
const alignY = {
  uppercase: css.styleVariants({
    none: {
      top: `${uppercaseNudge}em`
    },
    up: {
      top: `${uppercaseNudge - verticalCorrection}em`
    },
    down: {
      top: `${uppercaseNudge + verticalCorrection}em`
    }
  }, "alignY_uppercase"),
  lowercase: css.styleVariants({
    none: {
      top: `${lowercaseNudge}em`
    },
    up: {
      top: `${lowercaseNudge - verticalCorrection}em`
    },
    down: {
      top: `${lowercaseNudge + verticalCorrection}em`
    }
  }, "alignY_lowercase")
};
const blockWidths = css.styleVariants(styles_lib_themes_vars_css_cjs.vars.textSize, ({
  mobile,
  tablet
}) => styles_lib_css_responsiveStyle_cjs.responsiveStyle({
  mobile: {
    width: mobile.lineHeight
  },
  tablet: {
    width: tablet.lineHeight
  }
}), "blockWidths");
fileScope.endFileScope();
exports.alignY = alignY;
exports.blockWidths = blockWidths;
exports.cropToTextSize = cropToTextSize;
exports.inline = inline;
exports.inlineCrop = inlineCrop;
exports.size = size;
