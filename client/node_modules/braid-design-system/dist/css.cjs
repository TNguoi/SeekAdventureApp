"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const styles_lib_themes_vars_css_cjs = require("./styles/lib/themes/vars.css.cjs");
const styles_lib_css_atoms_atoms_cjs = require("./styles/lib/css/atoms/atoms.cjs");
const styles_lib_css_colorModeStyle_cjs = require("./styles/lib/css/colorModeStyle.cjs");
const styles_lib_css_responsiveStyle_cjs = require("./styles/lib/css/responsiveStyle.cjs");
const styles_lib_css_breakpoints_cjs = require("./styles/lib/css/breakpoints.cjs");
const globalTextStyle = ({
  weight = "regular",
  size = "standard"
} = {}) => ({
  fontFamily: styles_lib_themes_vars_css_cjs.vars.fontFamily,
  fontWeight: styles_lib_themes_vars_css_cjs.vars.textWeight[weight],
  color: styles_lib_themes_vars_css_cjs.vars.foregroundColor.neutral,
  ...styles_lib_css_responsiveStyle_cjs.responsiveStyle({
    mobile: {
      fontSize: styles_lib_themes_vars_css_cjs.vars.textSize[size].mobile.fontSize,
      lineHeight: styles_lib_themes_vars_css_cjs.vars.textSize[size].mobile.lineHeight
    },
    tablet: {
      fontSize: styles_lib_themes_vars_css_cjs.vars.textSize[size].tablet.fontSize,
      lineHeight: styles_lib_themes_vars_css_cjs.vars.textSize[size].tablet.lineHeight
    }
  })
});
const globalHeadingStyle = ({
  weight = "regular",
  level
}) => ({
  fontFamily: styles_lib_themes_vars_css_cjs.vars.fontFamily,
  fontWeight: styles_lib_themes_vars_css_cjs.vars.headingWeight[weight],
  color: styles_lib_themes_vars_css_cjs.vars.foregroundColor.neutral,
  ...styles_lib_css_responsiveStyle_cjs.responsiveStyle({
    mobile: {
      fontSize: styles_lib_themes_vars_css_cjs.vars.headingLevel[level].mobile.fontSize,
      lineHeight: styles_lib_themes_vars_css_cjs.vars.headingLevel[level].mobile.lineHeight
    },
    tablet: {
      fontSize: styles_lib_themes_vars_css_cjs.vars.headingLevel[level].tablet.fontSize,
      lineHeight: styles_lib_themes_vars_css_cjs.vars.headingLevel[level].tablet.lineHeight
    }
  })
});
const {
  grid,
  space,
  touchableSize,
  contentWidth,
  // TODO: COLORMODE RELEASE
  // Release new backgrounds
  backgroundColor: { surfaceDark: _, bodyDark: __, ...backgroundColor },
  foregroundColor,
  textWeight,
  borderColor,
  borderRadius,
  borderWidth,
  shadow
} = styles_lib_themes_vars_css_cjs.vars;
const vars = {
  grid,
  space,
  touchableSize,
  contentWidth,
  backgroundColor,
  foregroundColor,
  textWeight,
  borderColor,
  borderRadius,
  borderWidth,
  shadow
};
function atoms(props) {
  if (process.env.NODE_ENV !== "production") {
    if ("background" in props) {
      throw new Error(
        `'background' is not available via 'atoms'. This is because Braid uses React context to dynamically apply matching tones to child elements. Please use \`<Box background="...">\` instead.`
      );
    }
  }
  return styles_lib_css_atoms_atoms_cjs.atoms(props);
}
exports.colorModeStyle = styles_lib_css_colorModeStyle_cjs.colorModeStyle;
exports.responsiveStyle = styles_lib_css_responsiveStyle_cjs.responsiveStyle;
exports.breakpoints = styles_lib_css_breakpoints_cjs.breakpoints;
exports.atoms = atoms;
exports.globalHeadingStyle = globalHeadingStyle;
exports.globalTextStyle = globalTextStyle;
exports.vars = vars;
