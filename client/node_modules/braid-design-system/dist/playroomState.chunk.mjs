import { jsx } from "react/jsx-runtime";
import { createContext, useState, useMemo, useContext } from "react";
import curry from "lodash/curry.js";
const unwrapValue = (value) => {
  let actualValue = value;
  if (typeof value === "object" && value !== null && "currentTarget" in value) {
    const { currentTarget } = value;
    actualValue = currentTarget.type === "checkbox" ? currentTarget.checked : currentTarget.value;
  }
  return actualValue;
};
const makeStoreConsumer = (defaultState, store, setStore) => {
  const setDefaultState = (key, value) => {
    defaultState.set(key, value);
  };
  const getState = (key) => store.get(key) ?? defaultState.get(key);
  const setState = curry(
    (key, value) => setStore(new Map(store.set(key, unwrapValue(value))))
  );
  const toggleState = (key) => setState(key, !getState(key));
  const resetState = (...keys) => {
    if (keys.length) {
      keys.forEach((key) => {
        store.delete(key);
      });
      setStore(new Map(store));
    } else {
      setStore(/* @__PURE__ */ new Map());
    }
  };
  return {
    setDefaultState,
    getState,
    setState,
    toggleState,
    resetState
  };
};
const PlayroomStateContext = createContext(null);
const PlayroomStateProvider = ({
  defaultState: defaultStateProp,
  children
}) => {
  const [fallbackDefaultState] = useState(() => /* @__PURE__ */ new Map());
  const defaultState = defaultStateProp ?? fallbackDefaultState;
  const state = useState(/* @__PURE__ */ new Map());
  const storeConsumer = useMemo(
    () => makeStoreConsumer(defaultState, ...state),
    [state, defaultState]
  );
  return /* @__PURE__ */ jsx(PlayroomStateContext.Provider, { value: storeConsumer, children });
};
const usePlayroomStore = () => {
  const storeConsumer = useContext(PlayroomStateContext);
  if (storeConsumer === null) {
    throw new Error("Must be within a PlayroomStateProvider");
  }
  return storeConsumer;
};
const noop = () => {
};
function useFallbackState(stateKey, value, onChange, defaultValue) {
  const playroomState = usePlayroomStore();
  const [internalStateValue, setInternalStateValue] = useState(defaultValue);
  const wrapChangeHandler = (handler) => (...args) => {
    if (value === void 0) {
      (stateKey ? playroomState.setState(stateKey) : setInternalStateValue)(
        unwrapValue(args[0])
      );
    }
    return (handler || noop)(...args);
  };
  const handleChange = wrapChangeHandler(onChange || noop);
  const resolvedValue = value ?? (stateKey ? playroomState.getState(stateKey) ?? defaultValue : internalStateValue);
  return [resolvedValue, handleChange];
}
export {
  PlayroomStateProvider,
  useFallbackState,
  usePlayroomStore
};
