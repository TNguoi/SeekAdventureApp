"use strict";
require("../side-effects/lib/css/reset/index.cjs");
const React = require("react");
const styles_entries_css_cjs = require("../css.cjs");
const playroomState = require("../playroomState.chunk.cjs");
const styles_lib_css_atoms_sprinkles_css_cjs = require("../styles/lib/css/atoms/sprinkles.css.cjs");
const ToastContext = require("../ToastContext.chunk.cjs");
const styles_lib_css_breakpoints_cjs = require("../styles/lib/css/breakpoints.cjs");
function useScope() {
  const responsiveValue = ToastContext.useResponsiveValue();
  const [colorMode, setColorMode] = React.useState(
    "lightMode"
  );
  React.useEffect(() => {
    const observer = new MutationObserver((mutationsList) => {
      for (const mutation of mutationsList) {
        if (mutation.type === "attributes" && mutation.attributeName === "class") {
          setColorMode(
            document.documentElement.classList.contains(styles_lib_css_atoms_sprinkles_css_cjs.darkMode) ? "darkMode" : "lightMode"
          );
        }
      }
    });
    observer.observe(document.documentElement, { attributes: true });
    return () => {
      observer.disconnect();
    };
  }, [colorMode]);
  function playroomColorModeValue(value) {
    if (typeof value !== "object" || !(value.darkMode || value.lightMode)) {
      return;
    }
    return document.documentElement.classList.contains(styles_lib_css_atoms_sprinkles_css_cjs.darkMode) ? value.darkMode : value.lightMode;
  }
  function playroomResponsiveValue(value) {
    Object.values(value).forEach((v) => {
      if (v === null) {
        throw new Error(
          `You cannot use 'null' as a value when using 'responsiveValue'.`
        );
      }
    });
    const resolvedValue = responsiveValue(value);
    if (resolvedValue === null) {
      return value.mobile;
    }
    return resolvedValue;
  }
  return {
    vars: styles_entries_css_cjs.vars,
    atoms: styles_entries_css_cjs.atoms,
    breakpoints: styles_lib_css_breakpoints_cjs.breakpoints,
    showToast: ToastContext.useToast(),
    responsiveValue: playroomResponsiveValue,
    colorModeValue: playroomColorModeValue,
    ...playroomState.usePlayroomStore()
  };
}
module.exports = useScope;
