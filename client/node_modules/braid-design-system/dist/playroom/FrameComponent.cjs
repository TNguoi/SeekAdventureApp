"use strict";
const jsxRuntime = require("react/jsx-runtime");
require("../side-effects/lib/css/reset/index.cjs");
const React = require("react");
const playroomState = require("../playroomState.chunk.cjs");
const styles_lib_css_atoms_sprinkles_css_cjs = require("../styles/lib/css/atoms/sprinkles.css.cjs");
const sideEffects_lib_components_BraidProvider_BraidProvider_cjs = require("../side-effects/lib/components/BraidProvider/BraidProvider.cjs");
const ToastContext = require("../ToastContext.chunk.cjs");
const PlayroomLink = sideEffects_lib_components_BraidProvider_BraidProvider_cjs.makeLinkComponent(
  ({ href, onClick, ...restProps }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
    "a",
    {
      ref,
      href: href ?? "#",
      onClick: (e) => {
        if (!href) {
          e.preventDefault();
        }
        if (onClick) {
          onClick(e);
        }
      },
      ...restProps
    }
  )
);
const ResponsiveReady = ({ children }) => {
  const responsiveReady = ToastContext.useResponsiveValue()({ mobile: true }) ?? false;
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: responsiveReady ? children : null });
};
const FrameComponent = ({ theme, children }) => {
  React.useEffect(() => {
    let code = "";
    const darkTrigger = "braiddark";
    const lightTrigger = "braidlight";
    const longestTrigger = Math.max(lightTrigger.length, darkTrigger.length);
    const colorModeToggle = (ev) => {
      code += ev.key;
      if (code.substr(code.length - darkTrigger.length) === darkTrigger) {
        document.documentElement.classList.add(styles_lib_css_atoms_sprinkles_css_cjs.darkMode);
        code = "";
      }
      if (code.substr(code.length - lightTrigger.length) === lightTrigger) {
        document.documentElement.classList.remove(styles_lib_css_atoms_sprinkles_css_cjs.darkMode);
        code = "";
      }
      if (code.length > longestTrigger) {
        code = code.substr(code.length - longestTrigger);
      }
    };
    window.addEventListener("keydown", colorModeToggle);
    return () => {
      window.removeEventListener("keydown", colorModeToggle);
    };
  }, []);
  return /* @__PURE__ */ jsxRuntime.jsxs(React.Fragment, { children: [
    /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        dangerouslySetInnerHTML: {
          __html: theme.webFonts.map((font) => font.linkTag).join("")
        }
      }
    ),
    /* @__PURE__ */ jsxRuntime.jsx(playroomState.PlayroomStateProvider, { children: /* @__PURE__ */ jsxRuntime.jsx(sideEffects_lib_components_BraidProvider_BraidProvider_cjs.BraidProvider, { theme, linkComponent: PlayroomLink, children: /* @__PURE__ */ jsxRuntime.jsx(ToastContext.ToastProvider, { children: /* @__PURE__ */ jsxRuntime.jsx(ResponsiveReady, { children }) }) }) })
  ] });
};
module.exports = FrameComponent;
